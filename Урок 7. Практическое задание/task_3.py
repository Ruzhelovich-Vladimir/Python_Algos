"""
3. Массив размером 2m + 1, где m – натуральное число, заполнен случайным образом.
Найдите в массиве медиану. Медианой называется элемент ряда, делящий его на
две равные части: в одной находятся элементы, которые не меньше медианы,
в другой – не больше медианы. Задачу можно решить без сортировки исходного
массива. Но если это слишком сложно, то используйте метод сортировки,
который не рассматривался на уроках
"""

# Первоночально не понял, что такое медиана, поздабыл немного наверное
# курс алгебры.
from random import randint
from statistics import median
from timeit import timeit


def get_median1(list_param):
    """
    Поиск элементы медианы
    :param list_param: список чисел
    :return: индекс медианы
    """
    tmp_list = list_param.copy()
    while len(tmp_list) > 1:
        tmp_list.remove(min(tmp_list))
        tmp_list.remove(max(tmp_list))

    result = tmp_list[0]
    del tmp_list

    return result


def get_median2(list_param):
    """
    Поиск элементы медианы
    :param list_param: список чисел
    :return: индекс медианы
    """
    tmp_list = list_param.copy()

    for _ in range(len(list_param) // 2):
        tmp_list.remove(max(tmp_list))

    result = max(tmp_list)
    del tmp_list

    return result


M = int(input("Введите число m в размерности массива 2m + 1: "))
ARRAY = [randint(0, 40) for _ in range(2 * M + 1)]

# Вывод на экран
print("="*30)
print("Алгоритм удаляет максимальный и минимальный элемент")
print("="*30)
print(
    f"""Исходный - {ARRAY}\nМедиана - {get_median1(ARRAY)}""")
print(
    "Замер:",
    timeit(
        "get_median1(ARRAY)",
        setup="from __main__ import get_median1, ARRAY",
        number=100))
print("="*30)
print("Алгоритм удаляет максимальный элемент")
print("="*30)
print(
    f"""Исходный - {ARRAY}\nМедиана - {get_median2(ARRAY)}""")
print(
    "Замер:",
    timeit(
        "get_median2(ARRAY)",
        setup="from __main__ import get_median2, ARRAY",
        number=100))
print("="*30)
print("Алгоритм из модуля Statistics")
print("="*30)
print(
    f"""Исходный - {ARRAY}\nМедиана - {median(ARRAY)}""")
print("Замер:", timeit("median(ARRAY)",
                       setup="from __main__ import median, ARRAY", number=100))

"""
Бысрее всех работает алгоритм из модуля Statistics,
что не удивительно, модуль написан скорее всего на C++
и алгоритм более оптимальный, кроме этого исспользуется функция 
Max, Min, что влияет негативно на скорость 

2-й работает чуть быстрее, т.е. в в 2 раза меньше перебора элементов
и меньше осуществляетм запуск min, max, remote 

==============================
Алгоритм удаляет максимальный и минимальный элемент
==============================
Исходный - [29, 9, 32, 0, 28, 4, 4, 9, 4, 11, 5, 29, 32, 40, 14, 30, 1, 21, 38, 35, 5, 32, 17, 25, 13, 31, 28, 19, 1, 19, 5, 40, 34, 10, 8, 36, 2, 5, 8, 3, 17, 17, 16, 23, 34, 36, 32, 11, 5, 5, 13, 27, 28, 11, 40, 32, 16, 4, 37, 17, 4, 17, 17, 6, 40, 14, 8, 34, 31, 3, 39, 26, 28, 5, 18, 15, 38, 38, 19, 7, 9, 17, 10, 1, 11, 5, 20, 23, 29, 9, 18, 3, 2, 12, 29, 34, 17, 0, 15, 20, 11, 11, 8, 14, 26, 0, 5, 26, 38, 7, 36, 1, 20, 4, 29, 19, 10, 14, 19, 17, 25, 9, 28, 39, 18, 31, 19, 22, 37, 34, 15, 15, 14, 1, 24, 8, 9, 17, 10, 36, 1, 31, 9, 14, 11, 32, 4, 13, 5, 33, 12, 33, 29, 1, 24, 39, 34, 38, 20, 35, 7, 39, 0, 9, 39, 1, 6, 37, 20, 13, 33, 34, 16, 38, 27, 16, 19, 22, 8, 25, 25, 25, 3, 12, 6, 9, 21, 34, 19, 18, 2, 21, 34, 21, 25, 2, 34, 30, 27, 0, 24]
Медиана - 17
Замер: 0.09365860000000037
==============================
Алгоритм удаляет максимальный элемент
==============================
Исходный - [29, 9, 32, 0, 28, 4, 4, 9, 4, 11, 5, 29, 32, 40, 14, 30, 1, 21, 38, 35, 5, 32, 17, 25, 13, 31, 28, 19, 1, 19, 5, 40, 34, 10, 8, 36, 2, 5, 8, 3, 17, 17, 16, 23, 34, 36, 32, 11, 5, 5, 13, 27, 28, 11, 40, 32, 16, 4, 37, 17, 4, 17, 17, 6, 40, 14, 8, 34, 31, 3, 39, 26, 28, 5, 18, 15, 38, 38, 19, 7, 9, 17, 10, 1, 11, 5, 20, 23, 29, 9, 18, 3, 2, 12, 29, 34, 17, 0, 15, 20, 11, 11, 8, 14, 26, 0, 5, 26, 38, 7, 36, 1, 20, 4, 29, 19, 10, 14, 19, 17, 25, 9, 28, 39, 18, 31, 19, 22, 37, 34, 15, 15, 14, 1, 24, 8, 9, 17, 10, 36, 1, 31, 9, 14, 11, 32, 4, 13, 5, 33, 12, 33, 29, 1, 24, 39, 34, 38, 20, 35, 7, 39, 0, 9, 39, 1, 6, 37, 20, 13, 33, 34, 16, 38, 27, 16, 19, 22, 8, 25, 25, 25, 3, 12, 6, 9, 21, 34, 19, 18, 2, 21, 34, 21, 25, 2, 34, 30, 27, 0, 24]
Медиана - 17
Замер: 0.06818610000000014
==============================
Алгоритм из модуля Statistics
==============================
Исходный - [29, 9, 32, 0, 28, 4, 4, 9, 4, 11, 5, 29, 32, 40, 14, 30, 1, 21, 38, 35, 5, 32, 17, 25, 13, 31, 28, 19, 1, 19, 5, 40, 34, 10, 8, 36, 2, 5, 8, 3, 17, 17, 16, 23, 34, 36, 32, 11, 5, 5, 13, 27, 28, 11, 40, 32, 16, 4, 37, 17, 4, 17, 17, 6, 40, 14, 8, 34, 31, 3, 39, 26, 28, 5, 18, 15, 38, 38, 19, 7, 9, 17, 10, 1, 11, 5, 20, 23, 29, 9, 18, 3, 2, 12, 29, 34, 17, 0, 15, 20, 11, 11, 8, 14, 26, 0, 5, 26, 38, 7, 36, 1, 20, 4, 29, 19, 10, 14, 19, 17, 25, 9, 28, 39, 18, 31, 19, 22, 37, 34, 15, 15, 14, 1, 24, 8, 9, 17, 10, 36, 1, 31, 9, 14, 11, 32, 4, 13, 5, 33, 12, 33, 29, 1, 24, 39, 34, 38, 20, 35, 7, 39, 0, 9, 39, 1, 6, 37, 20, 13, 33, 34, 16, 38, 27, 16, 19, 22, 8, 25, 25, 25, 3, 12, 6, 9, 21, 34, 19, 18, 2, 21, 34, 21, 25, 2, 34, 30, 27, 0, 24]
Медиана - 17
Замер: 0.0017580999999999847
"""
